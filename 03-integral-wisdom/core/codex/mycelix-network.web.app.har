{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2025-07-03T23:58:21.239Z",
        "id": "page_1",
        "title": "https://mycelix-network.web.app/sacred-council-hub.html",
        "pageTimings": {
          "onContentLoad": 195.19600000057835,
          "onLoad": 471.1119999992661
        }
      }
    ],
    "entries": [
      {
        "_connectionId": "469095",
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "httpVersion": "h3",
          "headers": [
            {
              "name": ":authority",
              "value": "mycelix-network.web.app"
            },
            {
              "name": ":method",
              "value": "GET"
            },
            {
              "name": ":path",
              "value": "/sacred-council-hub.html"
            },
            {
              "name": ":scheme",
              "value": "https"
            },
            {
              "name": "accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br, zstd"
            },
            {
              "name": "accept-language",
              "value": "en-US,en;q=0.6"
            },
            {
              "name": "cache-control",
              "value": "max-age=0"
            },
            {
              "name": "if-modified-since",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "if-none-match",
              "value": "\"704a13762badb25514d9c2252919cc2db896f5797567437e479c570876fec94b-br\""
            },
            {
              "name": "priority",
              "value": "u=0, i"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "sec-fetch-dest",
              "value": "document"
            },
            {
              "name": "sec-fetch-mode",
              "value": "navigate"
            },
            {
              "name": "sec-fetch-site",
              "value": "none"
            },
            {
              "name": "sec-fetch-user",
              "value": "?1"
            },
            {
              "name": "sec-gpc",
              "value": "1"
            },
            {
              "name": "upgrade-insecure-requests",
              "value": "1"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=300"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:58:21 GMT"
            },
            {
              "name": "etag",
              "value": "\"704a13762badb25514d9c2252919cc2db896f5797567437e479c570876fec94b-br\""
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT"
            },
            {
              "name": "x-cache-hits",
              "value": "1"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300033-DEN"
            },
            {
              "name": "x-timer",
              "value": "S1751587101.184324,VS0,VE1"
            }
          ],
          "cookies": [],
          "content": {
            "size": 76857,
            "mimeType": "text/html",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 262,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.234Z",
        "time": 81.31399999462394,
        "timings": {
          "blocked": 7.9169999969010245,
          "dns": 0.02400000000000002,
          "ssl": 38.732,
          "connect": 39.492999999999995,
          "send": 0.5370000000000061,
          "wait": 31.05200000066496,
          "receive": 2.290999997057952,
          "_blocked_queueing": 5.234999996901024,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 8
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/quantum-love-field.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"1193a3f1acf2343b81e76e40927967cc10630fdac4f81db9bb30c5ccb2c9d91c-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.168913,VS0,VE37"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "4297"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20427,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.347Z",
        "time": 46.247000005678274,
        "timings": {
          "blocked": 43.03800000036834,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 2.0069999985676255,
          "receive": 1.2020000067423098,
          "_blocked_queueing": 37.18300000036834,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 9
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/multi-dimensional-love.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"780fc1b777454c1162045358f9527f798ed10de96e646a9a21fc96ef51bb6dba-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.168889,VS0,VE53"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "5797"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 31813,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.347Z",
        "time": 46.718999998120125,
        "timings": {
          "blocked": 42.90599999677762,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.9670000021378513,
          "receive": 1.8459999992046505,
          "_blocked_queueing": 38.289999996777624,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 10
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/temporal-love-healing.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"05d1efcbab098afcf48a61257d9e4126e851ef11db5ec3173ede186a40d13387-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.169377,VS0,VE71"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "5659"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 29713,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.347Z",
        "time": 47.031000001879875,
        "timings": {
          "blocked": 42.74599999577738,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 2.7329999972879886,
          "receive": 1.5520000088145025,
          "_blocked_queueing": 38.41599999577738,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 11
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/collective-love-intelligence.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"012656bcdec77560b9686f2f97d81e7d28e8788fb1e5c5eed09557fee578425e-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.169377,VS0,VE52"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "5550"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 28961,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.348Z",
        "time": 47.63799999636831,
        "timings": {
          "blocked": 42.60400000205822,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 3.1810000000116414,
          "receive": 1.8529999942984432,
          "_blocked_queueing": 38.58500000205822,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 12
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/cross-domain-quantum-sync.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"c24e7f9baf34234f4fef5b0ad3a5ce5328b4ad54c538a2830e9f050f2813b304-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.169700,VS0,VE45"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "3871"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 18938,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.348Z",
        "time": 48.25700000219513,
        "timings": {
          "blocked": 42.420999999734576,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 3.3590000006426126,
          "receive": 2.4770000018179417,
          "_blocked_queueing": 38.96499999973457,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "https://mycelix-network.web.app/sacred-council-hub.html",
          "lineNumber": 13
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "connection": "443",
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "https://mycelix-network.web.app/unified-field/meta-consciousness-system.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": "https://mycelix-network.web.app/sacred-council-hub.html"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "cache-control",
              "value": "public, max-age=31536000"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "etag",
              "value": "\"8fac6c2456a682df556eeb40d2c9fc127e631d8ca34466940bd7515431c3f86b-br\""
            },
            {
              "name": "x-timer",
              "value": "S1751586516.169948,VS0,VE31"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "x-cache",
              "value": "MISS"
            },
            {
              "name": "content-length",
              "value": "7581"
            },
            {
              "name": "date",
              "value": "Thu, 03 Jul 2025 23:48:36 GMT"
            },
            {
              "name": "content-type",
              "value": "text/javascript; charset=utf-8"
            },
            {
              "name": "last-modified",
              "value": "Thu, 03 Jul 2025 23:48:00 GMT"
            },
            {
              "name": "x-served-by",
              "value": "cache-den-kden1300074-DEN"
            },
            {
              "name": "x-cache-hits",
              "value": "0"
            },
            {
              "name": "vary",
              "value": "x-fh-requested-host, accept-encoding"
            }
          ],
          "cookies": [],
          "content": {
            "size": 43821,
            "mimeType": "text/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null,
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "199.36.158.100",
        "startedDateTime": "2025-07-03T23:58:21.348Z",
        "time": 48.57500000071013,
        "timings": {
          "blocked": 42.25000000026543,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 3.326999996872619,
          "receive": 2.9980000035720877,
          "_blocked_queueing": 39.16000000026543,
          "_workerStart": -1,
          "_workerReady": -1,
          "_workerFetchStart": -1,
          "_workerRespondWithSettled": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "loadSacredWork",
                "scriptId": "170",
                "url": "https://mycelix-network.web.app/sacred-council-hub.html",
                "lineNumber": 1305,
                "columnNumber": 39
              },
              {
                "functionName": "",
                "scriptId": "170",
                "url": "https://mycelix-network.web.app/sacred-council-hub.html",
                "lineNumber": 1928,
                "columnNumber": 16
              }
            ],
            "parent": {
              "description": "setTimeout",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "170",
                  "url": "https://mycelix-network.web.app/sacred-council-hub.html",
                  "lineNumber": 1926,
                  "columnNumber": 12
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "pageref": "page_1",
        "request": {
          "method": "GET",
          "url": "http://localhost:3001/api/work",
          "httpVersion": "",
          "headers": [
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            },
            {
              "name": "Referer",
              "value": ""
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Brave\";v=\"138\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 0,
          "statusText": "",
          "httpVersion": "",
          "headers": [],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": -1,
          "_transferSize": 0,
          "_error": "net::ERR_BLOCKED_BY_CLIENT",
          "_fetchedViaServiceWorker": false
        },
        "serverIPAddress": "",
        "startedDateTime": "2025-07-03T23:58:23.441Z",
        "time": 19.175999994331505,
        "timings": {
          "blocked": 19.175999994331505,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0,
          "receive": 0,
          "_blocked_queueing": -1
        }
      }
    ]
  }
}