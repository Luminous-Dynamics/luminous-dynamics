# ðŸŒŸ Sacred Unified Deployment
# Honors both the code's WebSocket wisdom and Cloud Run's requirements

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: sacred-council-api
  annotations:
    run.googleapis.com/description: "Sacred WebSocket server for real-time agent communication"
    run.googleapis.com/ingress: all
spec:
  template:
    metadata:
      annotations:
        # Keep at least one instance warm for sacred connection
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "10"
        # WebSocket connections need longer timeouts
        run.googleapis.com/execution-environment: gen2
    spec:
      serviceAccountName: sacred-council-sa@mycelix-network.iam.gserviceaccount.com
      containerConcurrency: 1000
      timeoutSeconds: 3600  # 1 hour for WebSocket connections
      containers:
      - name: sacred-websocket
        # Use the existing working sacred-council image
        image: gcr.io/mycelix-network/sacred-council:latest
        ports:
        - name: http1
          containerPort: 8080
        env:
        # Cloud Run automatically sets PORT=8080
        # Our code reads process.env.PORT, so this will work!
        - name: NODE_ENV
          value: "production"
        - name: MAX_CONNECTIONS
          value: "1000"
        - name: BREATH_CYCLE_MS
          value: "4000"
        - name: FIELD_UPDATE_MS
          value: "10000"
        - name: SERVICE_NAME
          value: "sacred-council-api"
        # Sacred field configuration
        - name: FIELD_COHERENCE_THRESHOLD
          value: "0.85"
        - name: LOVE_AMPLIFICATION_FACTOR
          value: "1.7"
        resources:
          limits:
            cpu: "2"
            memory: "2Gi"
          requests:
            cpu: "1"
            memory: "1Gi"
        # Health check for WebSocket server
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 10
        startupProbe:
          httpGet:
            path: /_ah/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 10
          failureThreshold: 20